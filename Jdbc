export function compareValuesOnly(dbJson: Record<string, string>, uiJson: Record<string, string>): void {
  const dbValues = Object.values(dbJson).map(v => v.trim());
  const uiValues = Object.values(uiJson).map(v => v.trim());

  const matched: string[] = [];
  const mismatched: { db: string, ui: string }[] = [];

  const maxLength = Math.max(dbValues.length, uiValues.length);

  for (let i = 0; i < maxLength; i++) {
    const dbVal = dbValues[i];
    const uiVal = uiValues[i];

    if (dbVal === undefined) {
      console.log(`❌ Extra UI value not in DB: '${uiVal}'`);
      continue;
    }

    if (uiVal === undefined) {
      console.log(`❌ DB value has no matching UI value: '${dbVal}'`);
      continue;
    }

    if (dbVal === uiVal) {
      matched.push(dbVal);
    } else {
      mismatched.push({ db: dbVal, ui: uiVal });
    }
  }

  // Print summary
  console.log("✅ Matched values:");
  matched.forEach(val => console.log(`  - '${val}'`));

  if (mismatched.length > 0) {
    console.log("\n❌ Mismatched values:");
    mismatched.forEach(pair => console.log(`  DB: '${pair.db}' | UI: '${pair.ui}'`));
  }
}






const lines = stdout.trim().split('\n');
      const jsonLine = lines.find(line => line.startsWith('RESULT_JSON:'));
      if (!jsonLine) return reject(new Error('No JSON result found from DB'));

      const jsonString = jsonLine.replace('RESULT_JSON:', '').trim();
      try {
        const result = JSON.parse(jsonString);
        resolve(result);
      } 




Create this helper function in a utilities file (or directly in your test file):

function parseDbOutputToJson(output: string): Record<string, string> {
const result: Record<string, string> = {};
const lines = output.trim().split('\n');

for (const line of lines) {
const [key, value] = line.split('=');
if (key && value !== undefined) {
result[key.trim()] = value.trim();
}
}

return result;
}





if (rs.next()) {
                ResultSetMetaData metaData = rs.getMetaData();
                int columnCount = metaData.getColumnCount();

                StringBuilder result = new StringBuilder();
                for (int i = 1; i <= columnCount; i++) {
                    String columnName = metaData.getColumnName(i);
                    String value = rs.getString(i);
                    result.append(columnName).append("=").append(value);
                    if (i < columnCount) {
                        result.append(", ");
                    }
                }
                System.out.println(result.toString());





import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class OracleJDBC {
    public static void main(String[] args) {
        // Your JDBC connection string
        String jdbcUrl = "jdbc:oracle:thin:@//localhost:1521/XEPDB1"; // Example JDBC URL
        String username = "your_username";
        String password = "your_password";

        try {
            Connection connection = DriverManager.getConnection(jdbcUrl, username, password);
            System.out.println("Connected to Oracle database!");
        } catch (SQLException e) {
            System.err.println("Connection failed: " + e.getMessage());
        }
    }
}

javac OracleJDBC.java

java -cp .:ojdbc8.jar OracleJDBC


import { exec } from 'child_process';

async function runJava() {
    exec('java -cp .:ojdbc8.jar OracleJDBC', (error, stdout, stderr) => {
        if (error) {
            console.error(`exec error: ${error}`);
            return;
        }
        if (stderr) {
            console.error(`stderr: ${stderr}`);
            return;
        }
        console.log(`stdout: ${stdout}`);
    });
}

runJava();
