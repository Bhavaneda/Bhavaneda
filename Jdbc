import java.util.Map;
import java.util.Set;

public class DataComparer {

    public static void compareUiAndDb(Map<String, String> uiJson, Map<String, String> dbResult, Map<String, String> keyMapping) {
        System.out.println("Comparing UI and DB values:");

        for (Map.Entry<String, String> entry : keyMapping.entrySet()) {
            String uiKey = entry.getKey();
            String dbKey = entry.getValue();

            String uiValue = uiJson.getOrDefault(uiKey, "").trim();
            String dbValue = dbResult.getOrDefault(dbKey, "").trim();

            if (uiValue.equalsIgnoreCase(dbValue)) {
                System.out.println("✅ Match: UI [" + uiKey + "] = '" + uiValue + "' matches DB [" + dbKey + "] = '" + dbValue + "'");
            } else {
                System.out.println("❌ Mismatch: UI [" + uiKey + "] = '" + uiValue + "' vs DB [" + dbKey + "] = '" + dbValue + "'");
            }
        }
    }
}


Map<String, String> uiJson = Map.of(
    "userName", "John Doe",
    "userEmail", "john@example.com"
);

Map<String, String> dbResult = Map.of(
    "FULL_NAME", "John Doe",
    "EMAIL_ID", "john@example.com"
);

// Mapping between UI keys and DB keys
Map<String, String> keyMapping = Map.of(
    "userName", "FULL_NAME",
    "userEmail", "EMAIL_ID"
);

// Compare
DataComparer.compareUiAndDb(uiJson, dbResult, keyMapping);






import java.sql.*;
import java.util.HashMap;
import java.util.Map;

public class DBUtils {

    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:xe";
    private static final String DB_USER = "your_username";
    private static final String DB_PASSWORD = "your_password";

    public static Map<String, String> runQueryWithParam(String sql, String... params) {
        Map<String, String> result = new HashMap<>();

        try {
            Class.forName("oracle.jdbc.OracleDriver");

            try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {

                // Set parameters in the prepared statement
                for (int i = 0; i < params.length; i++) {
                    pstmt.setString(i + 1, params[i]);
                }

                try (ResultSet rs = pstmt.executeQuery()) {
                    ResultSetMetaData metaData = rs.getMetaData();
                    int columnCount = metaData.getColumnCount();

                    if (rs.next()) {
                        for (int i = 1; i <= columnCount; i++) {
                            result.put(metaData.getColumnName(i), rs.getString(i));
                        }
                    }
                }

            }
        } catch (Exception e) {
            e.printStackTrace(); // You can log or rethrow as needed
        }

        return result;
    }
}



import java.sql.*;
import java.util.HashMap;
import java.util.Map;

public class DBUtils {

    private static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:xe"; // Update this
    private static final String DB_USER = "your_username";
    private static final String DB_PASSWORD = "your_password";

    public static Map<String, String> runQuery(String sql) throws SQLException, ClassNotFoundException {
        Class.forName("oracle.jdbc.OracleDriver");
        Map<String, String> result = new HashMap<>();

        try (Connection conn = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            ResultSetMetaData metaData = rs.getMetaData();
            int columnCount = metaData.getColumnCount();

            if (rs.next()) {
                for (int i = 1; i <= columnCount; i++) {
                    result.put(metaData.getColumnName(i), rs.getString(i));
                }
            }
        }
        return result;
    }
}





import com.microsoft.playwright.*;
import org.junit.jupiter.api.Test;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class MyPlaywrightTest {
    @Test
    public void testUIAndDBValidation() throws Exception {
        try (Playwright playwright = Playwright.create()) {
            Browser browser = playwright.chromium().launch();
            Page page = browser.newPage();

            page.navigate("http://your-app-url.com");

            String uiValue = page.locator("#someElement").textContent().trim();

            String sql = "SELECT full_name FROM users WHERE user_id = '123'";
            Map<String, String> dbResult = DBUtils.runQuery(sql);
            String dbValue = dbResult.get("FULL_NAME").trim();

            assertEquals(dbValue, uiValue, "UI and DB values do not match");
        }
    }
}







import com.microsoft.playwright.*;
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class Sidebar {
  private final Page page;
  private final Locator searchDropDown;
  private final Locator searchByWellsLoanNumber;
  private final Locator txtWFLoanNum;
  private final Locator dropdownClientNum;
  private final Locator clientNum;  // assuming this is a container for the dropdown items
  private final Locator btnSearch;

  // Constructor with locator initializations
  public Sidebar(Page page) {
    this.page = page;
    this.searchDropDown = page.locator("your-selector-for-searchDropDown");
    this.searchByWellsLoanNumber = page.locator("your-selector-for-searchByWellsLoanNumber");
    this.txtWFLoanNum = page.locator("your-selector-for-txtWFLoanNum");
    this.dropdownClientNum = page.locator("your-selector-for-dropdownClientNum");
    this.clientNum = page.locator("your-selector-for-clientNum"); // container for dynamic option
    this.btnSearch = page.locator("your-selector-for-btnSearch");
  }

  public void searchByWellsLoanNumber(String wfLoanNo, String clienNum) {
    searchDropDown.click();
    searchByWellsLoanNumber.click();
    assertThat(searchDropDown).hasText(" Wells Fargo Loan Number ");
    
    assertThat(txtWFLoanNum).isVisible();
    txtWFLoanNum.click();
    txtWFLoanNum.fill(wfLoanNo);

    assertThat(dropdownClientNum).isVisible();
    dropdownClientNum.click();

    Locator option = clientNum.locator(String.format("//span[normalize-space(text())='%s']", clienNum));
    assertThat(option).isVisible();
    option.click();

    btnSearch.click();
  }
}




import com.microsoft.playwright.*;
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class Sidebar {
  private final Page page;

  private final Locator unassignedWorklist;
  private final Locator arrowButton;
  private final Locator searchContainer;
  private final Locator searchDropDown;
  private final Locator searchList;
  private final Locator btnSearch;
  private final Locator linkAdvancedSearch;

  public Sidebar(Page page) {
    this.page = page;

    this.unassignedWorklist = page.locator("your-selector-for-unassignedWorklist");
    this.arrowButton = page.locator("your-selector-for-arrowButton");
    this.searchContainer = page.locator("your-selector-for-searchContainer");
    this.searchDropDown = page.locator("your-selector-for-searchDropDown");
    this.searchList = page.locator("your-selector-for-searchList");
    this.btnSearch = page.locator("your-selector-for-btnSearch");
    this.linkAdvancedSearch = page.locator("your-selector-for-linkAdvancedSearch");
  }

  public void verifyWorkListDropDown(boolean isVisible) {
    if (!isVisible) {
      assertThat(unassignedWorklist).isHidden();
    }
  }

  public boolean isRightArrowVisible() {
    return arrowButton.isVisible();
  }

  public void clickArrowButton() {
    arrowButton.click();
  }

  public void verifySearchContainer() {
    page.waitForTimeout(10000);
    assertThat(searchContainer).isVisible();
    assertThat(searchContainer.locator("b:has-text('Search')")).isVisible();
    assertThat(searchContainer.locator("b:has-text('Search Type:')")).isVisible();

    assertThat(searchDropDown).isVisible();
    assertThat(searchDropDown).not().hasText(" Wells Fargo Loan Number ");  // optional check
    assertThat(searchList).isVisible();
    assertThat(btnSearch).isVisible();
    btnSearch.click();

    assertThat(linkAdvancedSearch).isVisible();
    linkAdvancedSearch.click();
  }
}




import com.microsoft.playwright.*;

import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

public class Sidebar {
  private final Page page;

  private final Locator searchDropDown;
  private final Locator searchByCustName;
  private final Locator searchByUniversalLoanID;
  private final Locator txtFirstName;
  private final Locator txtLastName;
  private final Locator txtUniversalLoanID;
  private final Locator btnSearch;

  public Sidebar(Page page) {
    this.page = page;

    this.searchDropDown = page.locator("your-selector-for-searchDropDown");
    this.searchByCustName = page.locator("your-selector-for-searchByCustName");
    this.searchByUniversalLoanID = page.locator("your-selector-for-searchByUniversalLoanID");
    this.txtFirstName = page.locator("your-selector-for-txtFirstName");
    this.txtLastName = page.locator("your-selector-for-txtLastName");
    this.txtUniversalLoanID = page.locator("your-selector-for-txtUniversalLoanID");
    this.btnSearch = page.locator("your-selector-for-btnSearch");
  }

  public void srhByClientName(String firstName, String lastName) {
    searchDropDown.click();
    searchByCustName.click();

    assertThat(searchDropDown).hasText(" Customer Name ");

    assertThat(txtFirstName).isVisible();
    txtFirstName.click();
    txtFirstName.fill(firstName);

    assertThat(txtLastName).isVisible();
    txtLastName.click();
    txtLastName.fill(lastName);

    btnSearch.click();
  }

  public void srhByUniversalLoanID(String ulid) {
    searchDropDown.click();
    searchByUniversalLoanID.click();

    assertThat(searchDropDown).hasText(" Universal Loan ID ");

    assertThat(txtUniversalLoanID).isVisible();
    txtUniversalLoanID.click();
    txtUniversalLoanID.fill(ulid);

    btnSearch.click();
  }
}



public void checkWorkList() {
  unassignedWorklist.click();
  page.waitForTimeout(1000);

  sidebar.click();
  personalWorklist.click();
  page.waitForTimeout(1000);

  // Optionally, you can replace the above clicks with:
  // page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("Unassigned")).click();
  // page.getByRole(AriaRole.LINK, new Page.GetByRoleOptions().setName("Personal")).click();
}



public void verifyWorkListDropDown(boolean isVisible) {
  assertThat(worklist).isVisible();

  if (isVisible) {
    assertThat(personalWorklist).isVisible();
    assertThat(unassignedWorklist).isVisible();
  } else {
    assertThat(personalWorklist).isHidden();
    assertThat(unassignedWorklist).isHidden();
  }
}





import com.microsoft.playwright.*;
import org.junit.jupiter.api.*;
import static com.microsoft.playwright.assertions.PlaywrightAssertions.assertThat;

import java.nio.file.Paths;
import java.util.Map;

public class SidebarFunctionalityTest {
  private static Playwright playwright;
  private static Browser browser;
  private BrowserContext context;
  private Page page;

  @BeforeAll
  static void setup() {
    playwright = Playwright.create();
    browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));
  }

  @BeforeEach
  void createContext() {
    context = browser.newContext();
    page = context.newPage();
  }

  @AfterEach
  void closeContext() {
    context.close();
  }

  @AfterAll
  static void teardown() {
    browser.close();
    playwright.close();
  }

  @Test
  void sidebarFunctionality() throws Exception {
    // Load environment variables (use dotenv-java or manual loading)
    Map<String, String> env = System.getenv();
    String username = env.get("SU_TEST_USERNAME");
    String encryptedPassword = env.get("SU_TEST_PASSWORD");

    // Decrypt password (replace with your decryption logic)
    String password = Encryptor.decrypt(encryptedPassword); // Implement this

    // Instantiate page objects (replace with your implementations)
    LoginPage loginPage = new LoginPage(page);
    Navbar navbar = new Navbar(page);
    Logout logout = new Logout(page);
    Sidebar sidebar = new Sidebar(page);

    loginPage.launchApp();
    page.waitForTimeout(5000);
    loginPage.verifyPage();

    // Continue with your sidebar tests...
  }
}











SET SERVEROUTPUT ON SIZE UNLIMITED
DECLARE
  v_sql    VARCHAR2(1000);
  v_count  NUMBER;
BEGIN
  FOR r IN (
    SELECT table_name, column_name
    FROM all_tab_columns
    WHERE data_type IN ('VARCHAR2', 'CHAR')  -- only search text columns
  )
  LOOP
    BEGIN
      v_sql := 'SELECT COUNT(*) FROM ' || r.table_name ||
               ' WHERE ' || r.column_name || ' = ''0178994588''';
      
      EXECUTE IMMEDIATE v_sql INTO v_count;

      IF v_count > 0 THEN
        dbms_output.put_line('Found in ' || r.table_name || '.' || r.column_name);
      END IF;
    EXCEPTION
      WHEN OTHERS THEN
        NULL;  -- ignore errors from inaccessible tables or bad queries
    END;
  END LOOP;
END;
/





export function compareMappedValues(
  dbJson: Record<string, string>,
  uiJson: Record<string, string>,
  fieldMap: Record<string, string> // e.g., { uiKey: dbKey }
): void {
  const matched: string[] = [];
  const mismatched: { uiKey: string; dbValue: string; uiValue: string }[] = [];

  for (const [uiKey, dbKey] of Object.entries(fieldMap)) {
    const dbVal = dbJson[dbKey]?.trim();
    const uiVal = uiJson[uiKey]?.trim();

    if (dbVal === undefined || uiVal === undefined) {
      console.log(`⚠️ Missing value for '${uiKey}' or '${dbKey}'`);
      continue;
    }

    if (dbVal === uiVal) {
      matched.push(uiKey);
    } else {
      mismatched.push({ uiKey, dbValue: dbVal, uiValue: uiVal });
    }
  }

  console.log("\n✅ Matched Fields:");
  matched.forEach(f => console.log(`  - ${f}`));

  if (mismatched.length > 0) {
    console.log("\n❌ Mismatched Fields:");
    mismatched.forEach(m =>
      console.log(`  ${m.uiKey} → DB: '${m.dbValue}' | UI: '${m.uiValue}'`)
    );
  }
}







export function compareValuesOnly(dbJson: Record<string, string>, uiJson: Record<string, string>): void {
  const dbValues = Object.values(dbJson).map(v => v.trim());
  const uiValues = Object.values(uiJson).map(v => v.trim());

  const matched: string[] = [];
  const mismatched: { db: string, ui: string }[] = [];

  const maxLength = Math.max(dbValues.length, uiValues.length);

  for (let i = 0; i < maxLength; i++) {
    const dbVal = dbValues[i];
    const uiVal = uiValues[i];

    if (dbVal === undefined) {
      console.log(`❌ Extra UI value not in DB: '${uiVal}'`);
      continue;
    }

    if (uiVal === undefined) {
      console.log(`❌ DB value has no matching UI value: '${dbVal}'`);
      continue;
    }

    if (dbVal === uiVal) {
      matched.push(dbVal);
    } else {
      mismatched.push({ db: dbVal, ui: uiVal });
    }
  }

  // Print summary
  console.log("✅ Matched values:");
  matched.forEach(val => console.log(`  - '${val}'`));

  if (mismatched.length > 0) {
    console.log("\n❌ Mismatched values:");
    mismatched.forEach(pair => console.log(`  DB: '${pair.db}' | UI: '${pair.ui}'`));
  }
}






const lines = stdout.trim().split('\n');
      const jsonLine = lines.find(line => line.startsWith('RESULT_JSON:'));
      if (!jsonLine) return reject(new Error('No JSON result found from DB'));

      const jsonString = jsonLine.replace('RESULT_JSON:', '').trim();
      try {
        const result = JSON.parse(jsonString);
        resolve(result);
      } 




Create this helper function in a utilities file (or directly in your test file):

function parseDbOutputToJson(output: string): Record<string, string> {
const result: Record<string, string> = {};
const lines = output.trim().split('\n');

for (const line of lines) {
const [key, value] = line.split('=');
if (key && value !== undefined) {
result[key.trim()] = value.trim();
}
}

return result;
}





if (rs.next()) {
                ResultSetMetaData metaData = rs.getMetaData();
                int columnCount = metaData.getColumnCount();

                StringBuilder result = new StringBuilder();
                for (int i = 1; i <= columnCount; i++) {
                    String columnName = metaData.getColumnName(i);
                    String value = rs.getString(i);
                    result.append(columnName).append("=").append(value);
                    if (i < columnCount) {
                        result.append(", ");
                    }
                }
                System.out.println(result.toString());





import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class OracleJDBC {
    public static void main(String[] args) {
        // Your JDBC connection string
        String jdbcUrl = "jdbc:oracle:thin:@//localhost:1521/XEPDB1"; // Example JDBC URL
        String username = "your_username";
        String password = "your_password";

        try {
            Connection connection = DriverManager.getConnection(jdbcUrl, username, password);
            System.out.println("Connected to Oracle database!");
        } catch (SQLException e) {
            System.err.println("Connection failed: " + e.getMessage());
        }
    }
}

javac OracleJDBC.java

java -cp .:ojdbc8.jar OracleJDBC


import { exec } from 'child_process';

async function runJava() {
    exec('java -cp .:ojdbc8.jar OracleJDBC', (error, stdout, stderr) => {
        if (error) {
            console.error(`exec error: ${error}`);
            return;
        }
        if (stderr) {
            console.error(`stderr: ${stderr}`);
            return;
        }
        console.log(`stdout: ${stdout}`);
    });
}

runJava();
